type id = int;

type view =
  | AllTodos
  | ActiveTodos
  | CompletedTodos;

type msg =
  | EditNewTodo(string)
  | AddNewTodo
  | HoverTodo(id)
  | StartEditingTodo(id)
  | EditTodo(id, string)
  | DoneEditingTodo(id)
  | ToggleTodo(id)
  | DeleteTodo(id)
  | View(view)
  | ToggleAll
  | ClearCompleted;

type todo = {
  id: int,
  done_: bool,
  text: string,
  hovered: bool,
  editing: bool,
};

type state = {
  todos: list(option(todo)),
  newTodoText: string,
  viewing: view,
  nextId: int,
};

let initialState = {todos: [], newTodoText: "", viewing: AllTodos, nextId: 0};

let updateTodo = (f, state, id) =>
  if (id < 0) {
    Error("id must be non negative");
  } else {
    let before = List.take(id, state.todos);
    switch (List.drop(id, state.todos)) {
    | [target, ...rest] =>
      Ok({...state, todos: before @ [f(target)] @ rest})
    | _ => Error("No todo with id")
    };
  };

let activeCount = state =>
  state.todos
  |> List.filter_map(
       Option.flat_map(t =>
         if (t.done_) {
           None;
         } else {
           Some(t);
         }
       ),
     )
  |> List.length;

let completedCount = state =>
  state.todos
  |> List.filter_map(
       Option.flat_map(t =>
         if (t.done_) {
           Some(t);
         } else {
           None;
         }
       ),
     )
  |> List.length;

let totalCount = state =>
  state.todos |> List.filter_map(t => t) |> List.length;

let shownTodos = state => {
  let flat_m = t =>
    switch (state.viewing, t.done_) {
    | (AllTodos, _) => Some(t)
    | (ActiveTodos, false) => Some(t)
    | (CompletedTodos, true) => Some(t)
    | _ => None
    };
  let fil_m = ot => Option.flat_map(flat_m, ot);
  List.filter_map(fil_m, state.todos);
};

let update = (msg, state) =>
  switch (msg) {
  | EditNewTodo(text) => Ok({...state, newTodoText: text})
  | AddNewTodo =>
    let newTodo = {
      id: state.nextId,
      done_: false,
      text: state.newTodoText,
      hovered: false,
      editing: false,
    };
    let newState = {
      ...state,
      nextId: state.nextId + 1,
      newTodoText: "",
      todos: List.append(state.todos, [Some(newTodo)]),
    };
    Ok(newState);
  | HoverTodo(id) =>
    updateTodo(Option.map(t => {...t, hovered: true}), state, id)
  | StartEditingTodo(id) =>
    updateTodo(Option.map(t => {...t, editing: true}), state, id)
  | EditTodo(id, text) =>
    updateTodo(Option.map(t => {...t, text}), state, id)
  | DoneEditingTodo(id) =>
    updateTodo(Option.map(t => {...t, editing: false}), state, id)
  | ToggleTodo(id) =>
    updateTodo(Option.map(t => {...t, done_: ! t.done_}), state, id)
  | ToggleAll =>
    let anyNotDone =
      List.exists(
        ot =>
          switch (ot) {
          | None => false
          | Some(t) => ! t.done_
          },
        state.todos,
      );
    Ok({
      ...state,
      todos:
        List.map(Option.map(t => {...t, done_: anyNotDone}), state.todos),
    });
  | DeleteTodo(id) => updateTodo(_t => None, state, id)
  | View(type_) => Ok({...state, viewing: type_})
  | ClearCompleted =>
    Ok({
      ...state,
      todos:
        state.todos
        |> List.map(
             Option.flat_map(t =>
               if (t.done_) {
                 None;
               } else {
                 Some(t);
               }
             ),
           ),
    })
  };

[@auto]
[@rw]
[@imandra_theorem]
let len_append = (x, y) =>
  List.length(x @ y) == List.length(x) + List.length(y);

[@auto]
[@rw]
[@imandra_theorem]
let forall_map = (f, g, l) =>
  List.for_all(f, List.map(g, l)) == List.for_all(x => f(g(x)), l);

let vg_edit_ok = (state, todos, n, text) => {
  let state = {...state, todos};
  Option.is_some(List.nth(n, state.todos))
  ==> (
    switch (update(EditTodo(n, text), state)) {
    | Ok(_) => true
    | Error(_) => false
    }
  );
};

let vg_add_todo = s =>
  switch (update(AddNewTodo, s)) {
  | Ok(s') => List.length(s'.todos) == List.length(s.todos) + 1
  | _ => false
  };

let vg_edit_todo = (state, todos, n, text) => {
  let state = {...state, todos};
  (
    switch (List.nth(n, state.todos)) {
    | Some(Some(_)) => true
    | _ => false
    }
  )
  ==> (
    switch (update(EditTodo(n, text), state)) {
    | Ok(state') =>
      switch (List.nth(n, state'.todos)) {
      | Some(Some(t)) => t.text == text
      | _ => false
      }
    | _ => false
    }
  );
};

let vg_clear_completed = (state, todos) => {
  let state = {...state, todos};
  switch (update(ClearCompleted, state)) {
  | Ok(state') =>
    List.for_all(
      t =>
        switch (t) {
        | Some(t) => !t.done_
        | None => true
        },
      state'.todos,
    )
  | _ => false
  };
};

let vg_toggle_all = (state, todos) => {
  let state = {...state, todos};
  let allDoneP = f =>
    List.for_all(ot =>
      switch (ot) {
      | None => true
      | Some(t) => f(t.done_)
      }
    );
  let anyNotDone = !allDoneP(id, state.todos);
  switch (update(ToggleAll, state)) {
  | Ok(state') => allDoneP((==)(anyNotDone), state'.todos)
  | _ => false
  };
};

[@program]
module D = Decoders;

[@program]
module Decoders = (D: D.Decode.S) => {
  open D;
  let viewingTodo: decoder(view) =
    string
    >>= (
      fun
      | "AllTodos" => succeed(AllTodos)
      | "ActiveTodos" => succeed(ActiveTodos)
      | "CompletedTodos" => succeed(CompletedTodos)
      | _ => fail("Expected 'AllTodos', 'ActiveTodos' or 'CompletedTodos'")
    );
  let todo: decoder(todo) =
    field("id", int)
    >>= (
      id =>
        field("done", bool)
        >>= (
          done_ =>
            field("text", string)
            >>= (
              text =>
                field("hovered", bool)
                >>= (
                  hovered =>
                    field("editing", bool)
                    >>= (
                      editing =>
                        succeed({
                          id: Z.of_int(id),
                          done_,
                          text,
                          hovered,
                          editing,
                        })
                    )
                )
            )
        )
    );
  let state: decoder(state) =
    field("newTodoText", string)
    >>= (
      newTodoText =>
        field("nextId", int)
        >>= (
          nextId =>
            field("viewing", viewingTodo)
            >>= (
              viewing =>
                field("todos", list(nullable(todo)))
                >>= (
                  todos =>
                    succeed({
                      todos,
                      viewing,
                      nextId: Z.of_int(nextId),
                      newTodoText,
                    })
                )
            )
        )
    );
};

[@program]
module Encoders = (E: D.Encode.S) => {
  open E;
  let viewingTodo: encoder(view) =
    fun
    | AllTodos => string("AllTodos")
    | ActiveTodos => string("ActiveTodos")
    | CompletedTodos => string("CompletedTodos");
  let todo: encoder(todo) =
    x =>
      obj([
        ("id", int(Z.to_int(x.id))),
        ("done", bool(x.done_)),
        ("text", string(x.text)),
        ("hovered", bool(x.hovered)),
        ("editing", bool(x.editing)),
      ]);
  let state: encoder(state) =
    x =>
      obj([
        ("newTodoText", string(x.newTodoText)),
        ("nextId", int(Z.to_int(x.nextId))),
        ("viewing", viewingTodo(x.viewing)),
        ("todos", list(option(todo), x.todos)),
      ]);
};
